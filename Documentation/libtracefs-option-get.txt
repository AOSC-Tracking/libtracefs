libtracefs(3)
=============

NAME
----
tracefs_options_get_supported, tracefs_option_is_supported,
tracefs_options_get_enabled, tracefs_option_is_enabled - Get and check ftrace options.

SYNOPSIS
--------
[verse]
--
*#include <tracefs.h>*

struct tracefs_options_mask pass:[*]*tracefs_options_get_supported*(struct tracefs_instance pass:[*]_instance_);
bool *tracefs_option_is_supported*(struct tracefs_instance pass:[*]_instance_, enum tracefs_option_id _id_);
struct tracefs_options_mask pass:[*]*tracefs_options_get_enabled*(struct tracefs_instance pass:[*]_instance_);
bool *tracefs_option_is_enabled*(struct tracefs_instance pass:[*]_instance_, enum tracefs_option_id _id_);
--

DESCRIPTION
-----------
This set of APIs can be used to get and check current ftrace options. Supported ftrace options may
depend on the kernel version and the kernel configuration.

The _tracefs_options_get_supported()_ function gets all ftrace options supported by the system in
the given _instance_. If _instance_ is NULL, supported options of the top trace instance are
returned. The set of supported options must be the same in all trace instances.

The _tracefs_option_is_supported()_ function checks if the option with given _id_ is supported by
the system in the given _instance_. If _instance_ is NULL, the top trace instance is used. If an
option is supported at the top trace instance, it must be supported in all trace instances also.

The _tracefs_options_get_enabled()_ function gets all ftrace options, currently enabled in
the given _instance_. If _instance_ is NULL, enabled options of the top trace instance are returned.

The _tracefs_option_is_enabled()_ function checks if the option with given _id_ is enabled in the
given _instance_. If _instance_ is NULL, the top trace instance is used.

RETURN VALUE
------------
The _tracefs_options_get_supported()_ and _tracefs_options_get_enabled()_ functions return pointer
to allocated bitmask with trace options, or NULL in case of an error.

The _tracefs_option_is_supported()_ and _tracefs_option_is_enabled()_ functions return true if the
option in supported / enabled, or false otherwise.

EXAMPLE
-------
[source,c]
--
#include <tracefs.h>
...
const struct tracefs_options_mask *options;
...
options = tracefs_options_get_supported(NULL);
if (!options) {
	/* Failed to get supported options */
} else {
	...
}
...
options = tracefs_options_get_enabled(NULL);
if (!options) {
	/* Failed to get options, enabled in the top instance */
} else {
	...
}
...

if (tracefs_option_is_supported(NULL, TRACEFS_OPTION_LATENCY_FORMAT)) {
	/* Latency format option is supprted */
}

...

if (tracefs_option_is_enabled(NULL, TRACEFS_OPTION_STACKTRACE)) {
	/* Stacktrace option is enabled in the top instance */
}

--
FILES
-----
[verse]
--
*tracefs.h*
	Header file to include in order to have access to the library APIs.
*-ltracefs*
	Linker switch to add when building a program that uses the library.
--

SEE ALSO
--------
_libtracefs(3)_,
_libtraceevent(3)_,
_trace-cmd(1)_

AUTHOR
------
[verse]
--
*Steven Rostedt* <rostedt@goodmis.org>
*Tzvetomir Stoyanov* <tz.stoyanov@gmail.com>
--
REPORTING BUGS
--------------
Report bugs to  <linux-trace-devel@vger.kernel.org>

LICENSE
-------
libtracefs is Free Software licensed under the GNU LGPL 2.1

RESOURCES
---------
https://git.kernel.org/pub/scm/libs/libtrace/libtracefs.git/

COPYING
-------
Copyright \(C) 2020 VMware, Inc. Free use of this software is granted under
the terms of the GNU Public License (GPL).
