libtracefs(3)
=============

NAME
----
tracefs_instance_set_affinity, tracefs_instance_set_affinity_set, tracefs_set_affinity_raw -
Sets the affinity for an instance or top level for what CPUs enable tracing.

SYNOPSIS
--------
[verse]
--
*#include <tracefs.h>*

int tracefs_instance_set_affinity(struct tracefs_instace pass:[*]_instance_, const char pass:[*]_cpu_str_);
int tracefs_instance_set_affinity_set(struct tracefs_instace pass:[*]_instance_, cpu_set_t pass:[*]_set_, size_t _set_size_);
int tracefs_instance_set_affinity_raw(struct tracefs_instace pass:[*]_instance_, const char pass:[*]_mask_);

--

DESCRIPTION
-----------
These functions set the CPU affinity that limits what CPUs will have tracing enabled
for a given instance defined by the _instance_ parameter. If _instance_ is NULL, then
the top level instance is affected.

The _tracefs_instance_set_affinity()_ function takes a string _cpu_str_ that is a
list of CPUs to set the affinity for. If _cpu_str_ is NULL, then all the CPUs in
the system will be set. The format of _cpu_str_ is a comma deliminated string of
decimal numbers with no spaces. A range may be specified by a hyphen.

For example: "1,4,6-8"

The numbers do not need to be in order except for ranges, where the second number
must be equal to or greater than the first.

The _tracefs_instance_set_affinity_set()_ function takes a CPU set defined by
*CPU_SET(3)*. The size of the set defined by _set_size_ is the size in bytes of
_set_. If _set_ is NULL then all the CPUs on the system will be set, and _set_size_
is ignored.

The _tracefs_instance_set_affinity_raw()_ function takes a string that holds
a hexidecimal bitmask, where each 32 bits is separated by a comma. For a
machine with more that 32 CPUs, to set CPUS 1-10 and CPU 40:

 "100,000007fe"

Where the above is a hex representation of bits 1-10 and bit 40 being set.

RETURN VALUE
------------
All of these functions return 0 on success and -1 on error.

ERRORS
------
The following errors are for all the above calls:

*EFBIG* if a CPU is set that is greater than what is in the system.

*EINVAL* One of the parameters was invalid.

The following errors are for *tracefs_instance_set_affinity*() and *tracefs_instance_set_affinity_set*():

*ENOMEM* Memory allocation error.

*ENODEV* dynamic events of requested type are not configured for the running kernel.

The following errors are just for *tracefs_instance_set_affinity*()

*EACCES* The _cpu_str_ was modified by another thread when processing it.

EXAMPLE
-------
[source,c]
--
#include <sched.h>
#include <stdio.h>
#include <stdlib.h>
#include <tracefs.h>

int main (int argc, char **argv)
{
	struct trace_seq seq;
	cpu_set_t *set;
	size_t set_size;
	char *c;
	int cpu1;
	int cpu2;
	int i;

	if (argc < 2) {
		tracefs_instance_set_affinity(NULL, NULL);
		exit(0);
	}
	/* Show example using a set */
	if (argc == 2 && !strchr(argv[1],',')) {
		cpu1 = atoi(argv[1]);
		c = strchr(argv[1], '-');
		if (c++)
			cpu2 = atoi(c);
		else
			cpu2 = cpu1;
		if (cpu2 < cpu1) {
			fprintf(stderr, "Invalid CPU range\n");
			exit(-1);
		}
		set = CPU_ALLOC(cpu2 + 1);
		set_size = CPU_ALLOC_SIZE(cpu2 + 1);
		CPU_ZERO_S(set_size, set);
		for ( ; cpu1 <= cpu2; cpu1++)
			CPU_SET(cpu1, set);
		tracefs_instance_set_affinity_set(NULL, set, set_size);
		CPU_FREE(set);
		exit(0);
	}

	trace_seq_init(&seq);
	for (i = 0; i < argc; i++) {
		if (i)
			trace_seq_putc(&seq, ',');
		trace_seq_puts(&seq, argv[i]);
	}
	trace_seq_terminate(&seq);
	tracefs_instance_set_affinity(NULL, seq.buffer);
	trace_seq_destroy(&seq);
	exit(0);

	return 0;
}
--
FILES
-----
[verse]
--
*tracefs.h*
	Header file to include in order to have access to the library APIs.
*-ltracefs*
	Linker switch to add when building a program that uses the library.
--

SEE ALSO
--------
_libtracefs(3)_,
_libtraceevent(3)_,
_trace-cmd(1)_

AUTHOR
------
[verse]
--
*Steven Rostedt* <rostedt@goodmis.org>
*Tzvetomir Stoyanov* <tz.stoyanov@gmail.com>
--
REPORTING BUGS
--------------
Report bugs to  <linux-trace-devel@vger.kernel.org>

LICENSE
-------
libtracefs is Free Software licensed under the GNU LGPL 2.1

RESOURCES
---------
https://git.kernel.org/pub/scm/libs/libtrace/libtracefs.git/

COPYING
-------
Copyright \(C) 2020 VMware, Inc. Free use of this software is granted under
the terms of the GNU Public License (GPL).
